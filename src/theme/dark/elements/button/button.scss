@function set-contained-text-color($color) {
  @if (lightness($color) > 50) {
    @return #000000; // Lighter background, return dark color
  } @else {
    @return #ffffff; // Darker background, return light color
  }
}

.s3-btn-root {
  color: $text;

  //default styles - text
  &:hover, &:focus {
    background-color: rgba($white, 0.08);
  }

  &:disabled {
    color: rgba($text, .24) !important;
  }

  &.primary {
    color: $primary;

    &:hover, &:focus {
      background-color: rgba($primary, 0.08);
    }
  }

  &.secondary {
    color: $secondary;

    &:hover, &:focus {
      background-color: rgba($secondary, 0.08);
    }
  }

  &.error {
    color: $error;

    &:hover, &:focus {
      background-color: rgba($error, 0.08);
    }
  }

  &.success {
    color: $success;

    &:hover, &:focus {
      background-color: rgba($success, 0.08);
    }
  }

  //contained styles
  &.contained {
    color: $black;
    background-color: $buttonDefault;
    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);

    &:hover, &:focus {
      background-color: darken($buttonDefault, 8%);
      box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12);
    }

    &:active {
      box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);
    }

    &.primary {
      background-color: $primary;
      color: set-contained-text-color($primary);

      &:hover, &:focus {
        background-color: darken($primary, 8%);
      }
    }

    &.secondary {
      background-color: $secondary;
      color: set-contained-text-color($secondary);

      &:hover, &:focus {
        background-color: darken($secondary, 8%);
      }
    }

    &.error {
      background-color: $error;
      color: set-contained-text-color($error);

      &:hover, &:focus {
        background-color: darken($error, 8%);
      }

      &:active {
        background-color: darken($error, 12%);
      }
    }

    &.success {
      background-color: $success;
      color: set-contained-text-color($success);

      &:hover, &:focus {
        background-color: darken($success, 8%);
      }

      &:active {
        background-color: darken($success, 12%);
      }
    }

    &:disabled {
      box-shadow: none;
      background-color: rgba($black, .12);
    }
  }

  //outlined styles
  &.outlined {
    color: $text;
    border-color: rgba($text, .24);

    &:hover, &:focus {
      background-color: rgba($text, .1);
    }

    &:active {
      background-color: rgba($text, .2);
    }

    &.primary {
      color: $primary;
      border-color: rgba($primary, .32);

      &:hover, &:focus {
        background-color: rgba($primary, .1);
      }

      &:active {
        background-color: rgba($primary, .2);
      }
    }

    &.secondary {
      color: $secondary;
      border-color: rgba($secondary, .32);

      &:hover, &:focus {
        background-color: rgba($secondary, .1);
      }

      &:active {
        background-color: rgba($secondary, .2);
      }
    }

    &.error {
      color: $error;
      border-color: rgba($error, .32);

      &:hover, &:focus {
        background-color: rgba($error, .1);
      }

      &:active {
        background-color: rgba($error, .2);
      }
    }

    &.success {
      color: $success;
      border-color: rgba($success, .32);

      &:hover, &:focus {
        background-color: rgba($success, .1);
      }

      &:active {
        background-color: rgba($success, .2);
      }
    }

    &:disabled {
      border-color: rgba($text, .08);
    }
  }
}